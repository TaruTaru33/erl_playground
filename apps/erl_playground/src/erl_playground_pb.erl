%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.6
-module(erl_playground_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_req.type_enum'/1, 'enum_value_by_symbol_req.type_enum'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("erl_playground_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'req.type_enum'() :: 'create_session' | 'server_message' | 'options_list' | 'menu_choice' | 'weather' | 'question' | 'echo'.
-export_type(['req.type_enum'/0]).

%% message types
-type 'options_list.single_option'() :: #'options_list.single_option'{}.
-type weather() :: #weather{}.
-type echo() :: #echo{}.
-type question() :: #question{}.
-type menu_choice() :: #menu_choice{}.
-type options_list() :: #options_list{}.
-type server_message() :: #server_message{}.
-type create_session() :: #create_session{}.
-type req() :: #req{}.
-type envelope() :: #envelope{}.
-export_type(['options_list.single_option'/0, 'weather'/0, 'echo'/0, 'question'/0, 'menu_choice'/0, 'options_list'/0, 'server_message'/0, 'create_session'/0, 'req'/0, 'envelope'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    verify_msg(Msg, Opts),
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'options_list.single_option'{} ->
	  'e_msg_options_list.single_option'(Msg, TrUserData);
      #weather{} -> e_msg_weather(Msg, TrUserData);
      #echo{} -> e_msg_echo(Msg, TrUserData);
      #question{} -> e_msg_question(Msg, TrUserData);
      #menu_choice{} -> e_msg_menu_choice(Msg, TrUserData);
      #options_list{} -> e_msg_options_list(Msg, TrUserData);
      #server_message{} ->
	  e_msg_server_message(Msg, TrUserData);
      #create_session{} ->
	  e_msg_create_session(Msg, TrUserData);
      #req{} -> e_msg_req(Msg, TrUserData);
      #envelope{} -> e_msg_envelope(Msg, TrUserData)
    end.



'e_msg_options_list.single_option'(Msg, TrUserData) ->
    'e_msg_options_list.single_option'(Msg, <<>>,
				       TrUserData).


'e_msg_options_list.single_option'(#'options_list.single_option'{key
								     = F1,
								 value = F2},
				   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_weather(Msg, TrUserData) ->
    e_msg_weather(Msg, <<>>, TrUserData).


e_msg_weather(#weather{msg = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_string(TrF1, <<Bin/binary, 10>>)
	   end
    end.

e_msg_echo(Msg, TrUserData) ->
    e_msg_echo(Msg, <<>>, TrUserData).


e_msg_echo(#echo{msg = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_string(TrF1, <<Bin/binary, 10>>)
	   end
    end.

e_msg_question(Msg, TrUserData) ->
    e_msg_question(Msg, <<>>, TrUserData).


e_msg_question(#question{msg = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_string(TrF1, <<Bin/binary, 10>>)
	   end
    end.

e_msg_menu_choice(Msg, TrUserData) ->
    e_msg_menu_choice(Msg, <<>>, TrUserData).


e_msg_menu_choice(#menu_choice{choice = F1}, Bin,
		  TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_mfield_menu_choice_choice(TrF1, <<Bin/binary, 10>>,
					 TrUserData)
	   end
    end.

e_msg_options_list(Msg, TrUserData) ->
    e_msg_options_list(Msg, <<>>, TrUserData).


e_msg_options_list(#options_list{options = F1}, Bin,
		   TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_options_list_options(TrF1, Bin, TrUserData)
      end
    end.

e_msg_server_message(Msg, TrUserData) ->
    e_msg_server_message(Msg, <<>>, TrUserData).


e_msg_server_message(#server_message{message = F1}, Bin,
		     TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_create_session(Msg, TrUserData) ->
    e_msg_create_session(Msg, <<>>, TrUserData).


e_msg_create_session(#create_session{username = F1},
		     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_req(Msg, TrUserData) ->
    e_msg_req(Msg, <<>>, TrUserData).


e_msg_req(#req{type = F1, create_session_data = F2,
	       server_message_data = F3, options_list_data = F4,
	       menu_choice_data = F5, weather_data = F6,
	       question_data = F7, echo_data = F8},
	  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   'e_enum_req.type_enum'(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_req_create_session_data(TrF2,
						   <<B1/binary, 18>>,
						   TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_req_server_message_data(TrF3,
						   <<B2/binary, 26>>,
						   TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_req_options_list_data(TrF4, <<B3/binary, 34>>,
						 TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_mfield_req_menu_choice_data(TrF5, <<B4/binary, 42>>,
						TrUserData)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_mfield_req_weather_data(TrF6, <<B5/binary, 50>>,
					    TrUserData)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_mfield_req_question_data(TrF7, <<B6/binary, 58>>,
					     TrUserData)
		end
	 end,
    if F8 == undefined -> B7;
       true ->
	   begin
	     TrF8 = id(F8, TrUserData),
	     e_mfield_req_echo_data(TrF8, <<B7/binary, 66>>,
				    TrUserData)
	   end
    end.

e_msg_envelope(Msg, TrUserData) ->
    e_msg_envelope(Msg, <<>>, TrUserData).


e_msg_envelope(#envelope{uncompressed_data = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_envelope_uncompressed_data(TrF1,
					  <<Bin/binary, 18>>, TrUserData)
    end.

e_mfield_menu_choice_choice(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_options_list.single_option'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_options_list_options(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_options_list.single_option'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_options_list_options([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_options_list_options(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_options_list_options(Rest, Bin3, TrUserData);
e_field_options_list_options([], Bin, _TrUserData) ->
    Bin.

e_mfield_req_create_session_data(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_create_session(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_server_message_data(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_server_message(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_options_list_data(Msg, Bin, TrUserData) ->
    SubBin = e_msg_options_list(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_menu_choice_data(Msg, Bin, TrUserData) ->
    SubBin = e_msg_menu_choice(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_weather_data(Msg, Bin, TrUserData) ->
    SubBin = e_msg_weather(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_question_data(Msg, Bin, TrUserData) ->
    SubBin = e_msg_question(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_echo_data(Msg, Bin, TrUserData) ->
    SubBin = e_msg_echo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_envelope_uncompressed_data(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_req(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.



'e_enum_req.type_enum'(create_session, Bin) ->
    <<Bin/binary, 1>>;
'e_enum_req.type_enum'(server_message, Bin) ->
    <<Bin/binary, 2>>;
'e_enum_req.type_enum'(options_list, Bin) ->
    <<Bin/binary, 3>>;
'e_enum_req.type_enum'(menu_choice, Bin) ->
    <<Bin/binary, 4>>;
'e_enum_req.type_enum'(weather, Bin) ->
    <<Bin/binary, 5>>;
'e_enum_req.type_enum'(question, Bin) ->
    <<Bin/binary, 6>>;
'e_enum_req.type_enum'(echo, Bin) -> <<Bin/binary, 7>>;
'e_enum_req.type_enum'(V, Bin) -> e_varint(V, Bin).

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'options_list.single_option' ->
	  'd_msg_options_list.single_option'(Bin, TrUserData);
      weather -> d_msg_weather(Bin, TrUserData);
      echo -> d_msg_echo(Bin, TrUserData);
      question -> d_msg_question(Bin, TrUserData);
      menu_choice -> d_msg_menu_choice(Bin, TrUserData);
      options_list -> d_msg_options_list(Bin, TrUserData);
      server_message -> d_msg_server_message(Bin, TrUserData);
      create_session -> d_msg_create_session(Bin, TrUserData);
      req -> d_msg_req(Bin, TrUserData);
      envelope -> d_msg_envelope(Bin, TrUserData)
    end.



'd_msg_options_list.single_option'(Bin, TrUserData) ->
    'dfp_read_field_def_options_list.single_option'(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    TrUserData).

'dfp_read_field_def_options_list.single_option'(<<8,
						  Rest/binary>>,
						Z1, Z2, F1, F2, TrUserData) ->
    'd_field_options_list.single_option_key'(Rest, Z1, Z2,
					     F1, F2, TrUserData);
'dfp_read_field_def_options_list.single_option'(<<18,
						  Rest/binary>>,
						Z1, Z2, F1, F2, TrUserData) ->
    'd_field_options_list.single_option_value'(Rest, Z1, Z2,
					       F1, F2, TrUserData);
'dfp_read_field_def_options_list.single_option'(<<>>, 0,
						0, F1, F2, _) ->
    #'options_list.single_option'{key = F1, value = F2};
'dfp_read_field_def_options_list.single_option'(Other,
						Z1, Z2, F1, F2, TrUserData) ->
    'dg_read_field_def_options_list.single_option'(Other,
						   Z1, Z2, F1, F2, TrUserData).

'dg_read_field_def_options_list.single_option'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_options_list.single_option'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   TrUserData);
'dg_read_field_def_options_list.single_option'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_options_list.single_option_key'(Rest, 0, 0, F1,
						   F2, TrUserData);
      18 ->
	  'd_field_options_list.single_option_value'(Rest, 0, 0,
						     F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_options_list.single_option'(Rest, 0, 0, F1,
							 F2, TrUserData);
	    1 ->
		'skip_64_options_list.single_option'(Rest, 0, 0, F1, F2,
						     TrUserData);
	    2 ->
		'skip_length_delimited_options_list.single_option'(Rest,
								   0, 0, F1, F2,
								   TrUserData);
	    5 ->
		'skip_32_options_list.single_option'(Rest, 0, 0, F1, F2,
						     TrUserData)
	  end
    end;
'dg_read_field_def_options_list.single_option'(<<>>, 0,
					       0, F1, F2, _) ->
    #'options_list.single_option'{key = F1, value = F2}.

'd_field_options_list.single_option_key'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_options_list.single_option_key'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, TrUserData);
'd_field_options_list.single_option_key'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'dfp_read_field_def_options_list.single_option'(Rest, 0,
						    0, NewFValue, F2,
						    TrUserData).


'd_field_options_list.single_option_value'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_options_list.single_option_value'(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
'd_field_options_list.single_option_value'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_options_list.single_option'(Rest2,
						    0, 0, F1, NewFValue,
						    TrUserData).


'skip_varint_options_list.single_option'(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    'skip_varint_options_list.single_option'(Rest, Z1, Z2,
					     F1, F2, TrUserData);
'skip_varint_options_list.single_option'(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_options_list.single_option'(Rest,
						    Z1, Z2, F1, F2, TrUserData).


'skip_length_delimited_options_list.single_option'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_options_list.single_option'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, TrUserData);
'skip_length_delimited_options_list.single_option'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2,
						   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_options_list.single_option'(Rest2,
						    0, 0, F1, F2, TrUserData).


'skip_32_options_list.single_option'(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_options_list.single_option'(Rest,
						    Z1, Z2, F1, F2, TrUserData).


'skip_64_options_list.single_option'(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_options_list.single_option'(Rest,
						    Z1, Z2, F1, F2, TrUserData).


d_msg_weather(Bin, TrUserData) ->
    dfp_read_field_def_weather(Bin, 0, 0,
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_weather(<<10, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_weather_msg(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_weather(<<>>, 0, 0, F1, _) ->
    #weather{msg = F1};
dfp_read_field_def_weather(Other, Z1, Z2, F1,
			   TrUserData) ->
    dg_read_field_def_weather(Other, Z1, Z2, F1,
			      TrUserData).

dg_read_field_def_weather(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_weather(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
dg_read_field_def_weather(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_weather_msg(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_weather(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_weather(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_weather(Rest, 0, 0, F1,
					      TrUserData);
	    5 -> skip_32_weather(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_weather(<<>>, 0, 0, F1, _) ->
    #weather{msg = F1}.

d_field_weather_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, TrUserData)
    when N < 57 ->
    d_field_weather_msg(Rest, N + 7, X bsl N + Acc, F1,
			TrUserData);
d_field_weather_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_weather(Rest2, 0, 0, NewFValue,
			       TrUserData).


skip_varint_weather(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, TrUserData) ->
    skip_varint_weather(Rest, Z1, Z2, F1, TrUserData);
skip_varint_weather(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, TrUserData) ->
    dfp_read_field_def_weather(Rest, Z1, Z2, F1,
			       TrUserData).


skip_length_delimited_weather(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_weather(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
skip_length_delimited_weather(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_weather(Rest2, 0, 0, F1, TrUserData).


skip_32_weather(<<_:32, Rest/binary>>, Z1, Z2, F1,
		TrUserData) ->
    dfp_read_field_def_weather(Rest, Z1, Z2, F1,
			       TrUserData).


skip_64_weather(<<_:64, Rest/binary>>, Z1, Z2, F1,
		TrUserData) ->
    dfp_read_field_def_weather(Rest, Z1, Z2, F1,
			       TrUserData).


d_msg_echo(Bin, TrUserData) ->
    dfp_read_field_def_echo(Bin, 0, 0,
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_echo(<<10, Rest/binary>>, Z1, Z2, F1,
			TrUserData) ->
    d_field_echo_msg(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_echo(<<>>, 0, 0, F1, _) ->
    #echo{msg = F1};
dfp_read_field_def_echo(Other, Z1, Z2, F1,
			TrUserData) ->
    dg_read_field_def_echo(Other, Z1, Z2, F1, TrUserData).

dg_read_field_def_echo(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_echo(Rest, N + 7, X bsl N + Acc, F1,
			   TrUserData);
dg_read_field_def_echo(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_echo_msg(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_echo(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_echo(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_echo(Rest, 0, 0, F1, TrUserData);
	    5 -> skip_32_echo(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_echo(<<>>, 0, 0, F1, _) ->
    #echo{msg = F1}.

d_field_echo_msg(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		 TrUserData)
    when N < 57 ->
    d_field_echo_msg(Rest, N + 7, X bsl N + Acc, F1,
		     TrUserData);
d_field_echo_msg(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_echo(Rest2, 0, 0, NewFValue,
			    TrUserData).


skip_varint_echo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    skip_varint_echo(Rest, Z1, Z2, F1, TrUserData);
skip_varint_echo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_echo(Rest, Z1, Z2, F1, TrUserData).


skip_length_delimited_echo(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_echo(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
skip_length_delimited_echo(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_echo(Rest2, 0, 0, F1, TrUserData).


skip_32_echo(<<_:32, Rest/binary>>, Z1, Z2, F1,
	     TrUserData) ->
    dfp_read_field_def_echo(Rest, Z1, Z2, F1, TrUserData).


skip_64_echo(<<_:64, Rest/binary>>, Z1, Z2, F1,
	     TrUserData) ->
    dfp_read_field_def_echo(Rest, Z1, Z2, F1, TrUserData).


d_msg_question(Bin, TrUserData) ->
    dfp_read_field_def_question(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_question(<<10, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_question_msg(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_question(<<>>, 0, 0, F1, _) ->
    #question{msg = F1};
dfp_read_field_def_question(Other, Z1, Z2, F1,
			    TrUserData) ->
    dg_read_field_def_question(Other, Z1, Z2, F1,
			       TrUserData).

dg_read_field_def_question(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_question(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
dg_read_field_def_question(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_question_msg(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_question(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_question(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_question(Rest, 0, 0, F1,
					       TrUserData);
	    5 -> skip_32_question(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_question(<<>>, 0, 0, F1, _) ->
    #question{msg = F1}.

d_field_question_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, TrUserData)
    when N < 57 ->
    d_field_question_msg(Rest, N + 7, X bsl N + Acc, F1,
			 TrUserData);
d_field_question_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_question(Rest2, 0, 0, NewFValue,
				TrUserData).


skip_varint_question(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    skip_varint_question(Rest, Z1, Z2, F1, TrUserData);
skip_varint_question(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    dfp_read_field_def_question(Rest, Z1, Z2, F1,
				TrUserData).


skip_length_delimited_question(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_question(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_question(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_question(Rest2, 0, 0, F1,
				TrUserData).


skip_32_question(<<_:32, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_question(Rest, Z1, Z2, F1,
				TrUserData).


skip_64_question(<<_:64, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_question(Rest, Z1, Z2, F1,
				TrUserData).


d_msg_menu_choice(Bin, TrUserData) ->
    dfp_read_field_def_menu_choice(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_menu_choice(<<10, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_menu_choice_choice(Rest, Z1, Z2, F1,
			       TrUserData);
dfp_read_field_def_menu_choice(<<>>, 0, 0, F1, _) ->
    #menu_choice{choice = F1};
dfp_read_field_def_menu_choice(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_menu_choice(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_menu_choice(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_menu_choice(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_menu_choice(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_menu_choice_choice(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_menu_choice(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_menu_choice(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_menu_choice(Rest, 0, 0, F1,
						  TrUserData);
	    5 -> skip_32_menu_choice(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_menu_choice(<<>>, 0, 0, F1, _) ->
    #menu_choice{choice = F1}.

d_field_menu_choice_choice(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    d_field_menu_choice_choice(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
d_field_menu_choice_choice(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_options_list.single_option'(Bs,
						      TrUserData),
		   TrUserData),
    dfp_read_field_def_menu_choice(Rest2, 0, 0,
				   if F1 == undefined -> NewFValue;
				      true ->
					  'merge_msg_options_list.single_option'(F1,
										 NewFValue,
										 TrUserData)
				   end,
				   TrUserData).


skip_varint_menu_choice(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_menu_choice(Rest, Z1, Z2, F1, TrUserData);
skip_varint_menu_choice(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_menu_choice(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_menu_choice(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_menu_choice(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_menu_choice(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_menu_choice(Rest2, 0, 0, F1,
				   TrUserData).


skip_32_menu_choice(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_menu_choice(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_menu_choice(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_menu_choice(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_options_list(Bin, TrUserData) ->
    dfp_read_field_def_options_list(Bin, 0, 0,
				    id([], TrUserData), TrUserData).

dfp_read_field_def_options_list(<<10, Rest/binary>>, Z1,
				Z2, F1, TrUserData) ->
    d_field_options_list_options(Rest, Z1, Z2, F1,
				 TrUserData);
dfp_read_field_def_options_list(<<>>, 0, 0, F1,
				TrUserData) ->
    #options_list{options = lists_reverse(F1, TrUserData)};
dfp_read_field_def_options_list(Other, Z1, Z2, F1,
				TrUserData) ->
    dg_read_field_def_options_list(Other, Z1, Z2, F1,
				   TrUserData).

dg_read_field_def_options_list(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_options_list(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_options_list(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_options_list_options(Rest, 0, 0, F1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_options_list(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_options_list(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_options_list(Rest, 0, 0, F1,
						   TrUserData);
	    5 -> skip_32_options_list(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_options_list(<<>>, 0, 0, F1,
			       TrUserData) ->
    #options_list{options = lists_reverse(F1, TrUserData)}.

d_field_options_list_options(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_options_list_options(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
d_field_options_list_options(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_options_list.single_option'(Bs,
						      TrUserData),
		   TrUserData),
    dfp_read_field_def_options_list(Rest2, 0, 0,
				    cons(NewFValue, F1, TrUserData),
				    TrUserData).


skip_varint_options_list(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    skip_varint_options_list(Rest, Z1, Z2, F1, TrUserData);
skip_varint_options_list(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    dfp_read_field_def_options_list(Rest, Z1, Z2, F1,
				    TrUserData).


skip_length_delimited_options_list(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_options_list(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_options_list(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_options_list(Rest2, 0, 0, F1,
				    TrUserData).


skip_32_options_list(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_options_list(Rest, Z1, Z2, F1,
				    TrUserData).


skip_64_options_list(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_options_list(Rest, Z1, Z2, F1,
				    TrUserData).


d_msg_server_message(Bin, TrUserData) ->
    dfp_read_field_def_server_message(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_server_message(<<10, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_server_message_message(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_server_message(<<>>, 0, 0, F1, _) ->
    #server_message{message = F1};
dfp_read_field_def_server_message(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_server_message(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_server_message(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_server_message(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_server_message(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_server_message_message(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_server_message(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_server_message(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_server_message(Rest, 0, 0, F1,
						     TrUserData);
	    5 -> skip_32_server_message(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_server_message(<<>>, 0, 0, F1, _) ->
    #server_message{message = F1}.

d_field_server_message_message(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_server_message_message(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_server_message_message(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_server_message(Rest2, 0, 0,
				      NewFValue, TrUserData).


skip_varint_server_message(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_server_message(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_server_message(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_server_message(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_server_message(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_server_message(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_server_message(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_server_message(Rest2, 0, 0, F1,
				      TrUserData).


skip_32_server_message(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_server_message(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_server_message(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_server_message(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_create_session(Bin, TrUserData) ->
    dfp_read_field_def_create_session(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_create_session(<<10, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_create_session_username(Rest, Z1, Z2, F1,
				    TrUserData);
dfp_read_field_def_create_session(<<>>, 0, 0, F1, _) ->
    #create_session{username = F1};
dfp_read_field_def_create_session(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_create_session(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_create_session(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_create_session(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_create_session(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_create_session_username(Rest, 0, 0, F1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_create_session(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_create_session(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_create_session(Rest, 0, 0, F1,
						     TrUserData);
	    5 -> skip_32_create_session(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_create_session(<<>>, 0, 0, F1, _) ->
    #create_session{username = F1}.

d_field_create_session_username(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_create_session_username(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
d_field_create_session_username(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_create_session(Rest2, 0, 0,
				      NewFValue, TrUserData).


skip_varint_create_session(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_create_session(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_create_session(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_create_session(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_create_session(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_create_session(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_create_session(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_create_session(Rest2, 0, 0, F1,
				      TrUserData).


skip_32_create_session(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_create_session(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_create_session(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_create_session(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_req(Bin, TrUserData) ->
    dfp_read_field_def_req(Bin, 0, 0,
			   id(undefined, TrUserData), id(undefined, TrUserData),
			   id(undefined, TrUserData), id(undefined, TrUserData),
			   id(undefined, TrUserData), id(undefined, TrUserData),
			   id(undefined, TrUserData), id(undefined, TrUserData),
			   TrUserData).

dfp_read_field_def_req(<<8, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_req_type(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		     F7, F8, TrUserData);
dfp_read_field_def_req(<<18, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_req_create_session_data(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_req(<<26, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_req_server_message_data(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_req(<<34, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_req_options_list_data(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_req(<<42, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_req_menu_choice_data(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_req(<<50, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_req_weather_data(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, TrUserData);
dfp_read_field_def_req(<<58, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_req_question_data(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, TrUserData);
dfp_read_field_def_req(<<66, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_req_echo_data(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, TrUserData);
dfp_read_field_def_req(<<>>, 0, 0, F1, F2, F3, F4, F5,
		       F6, F7, F8, _) ->
    #req{type = F1, create_session_data = F2,
	 server_message_data = F3, options_list_data = F4,
	 menu_choice_data = F5, weather_data = F6,
	 question_data = F7, echo_data = F8};
dfp_read_field_def_req(Other, Z1, Z2, F1, F2, F3, F4,
		       F5, F6, F7, F8, TrUserData) ->
    dg_read_field_def_req(Other, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, TrUserData).

dg_read_field_def_req(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, TrUserData);
dg_read_field_def_req(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_req_type(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
			   F8, TrUserData);
      18 ->
	  d_field_req_create_session_data(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, TrUserData);
      26 ->
	  d_field_req_server_message_data(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, TrUserData);
      34 ->
	  d_field_req_options_list_data(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, TrUserData);
      42 ->
	  d_field_req_menu_choice_data(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, TrUserData);
      50 ->
	  d_field_req_weather_data(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, TrUserData);
      58 ->
	  d_field_req_question_data(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, TrUserData);
      66 ->
	  d_field_req_echo_data(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_req(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				F8, TrUserData);
	    1 ->
		skip_64_req(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7, F8,
			    TrUserData);
	    2 ->
		skip_length_delimited_req(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7, F8, TrUserData);
	    5 ->
		skip_32_req(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7, F8,
			    TrUserData)
	  end
    end;
dg_read_field_def_req(<<>>, 0, 0, F1, F2, F3, F4, F5,
		      F6, F7, F8, _) ->
    #req{type = F1, create_session_data = F2,
	 server_message_data = F3, options_list_data = F4,
	 menu_choice_data = F5, weather_data = F6,
	 question_data = F7, echo_data = F8}.

d_field_req_type(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_req_type(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		     F4, F5, F6, F7, F8, TrUserData);
d_field_req_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		 F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_req.type_enum'(Tmp),
    dfp_read_field_def_req(Rest, 0, 0, NewFValue, F2, F3,
			   F4, F5, F6, F7, F8, TrUserData).


d_field_req_create_session_data(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				TrUserData)
    when N < 57 ->
    d_field_req_create_session_data(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, TrUserData);
d_field_req_create_session_data(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_create_session(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_req(Rest2, 0, 0, F1,
			   if F2 == undefined -> NewFValue;
			      true ->
				  merge_msg_create_session(F2, NewFValue,
							   TrUserData)
			   end,
			   F3, F4, F5, F6, F7, F8, TrUserData).


d_field_req_server_message_data(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				TrUserData)
    when N < 57 ->
    d_field_req_server_message_data(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, TrUserData);
d_field_req_server_message_data(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_server_message(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_req(Rest2, 0, 0, F1, F2,
			   if F3 == undefined -> NewFValue;
			      true ->
				  merge_msg_server_message(F3, NewFValue,
							   TrUserData)
			   end,
			   F4, F5, F6, F7, F8, TrUserData).


d_field_req_options_list_data(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
			      TrUserData)
    when N < 57 ->
    d_field_req_options_list_data(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  TrUserData);
d_field_req_options_list_data(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
			      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_options_list(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_req(Rest2, 0, 0, F1, F2, F3,
			   if F4 == undefined -> NewFValue;
			      true ->
				  merge_msg_options_list(F4, NewFValue,
							 TrUserData)
			   end,
			   F5, F6, F7, F8, TrUserData).


d_field_req_menu_choice_data(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_req_menu_choice_data(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_req_menu_choice_data(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
			     TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_menu_choice(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_req(Rest2, 0, 0, F1, F2, F3, F4,
			   if F5 == undefined -> NewFValue;
			      true ->
				  merge_msg_menu_choice(F5, NewFValue,
							TrUserData)
			   end,
			   F6, F7, F8, TrUserData).


d_field_req_weather_data(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_req_weather_data(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_req_weather_data(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_weather(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_req(Rest2, 0, 0, F1, F2, F3, F4, F5,
			   if F6 == undefined -> NewFValue;
			      true ->
				  merge_msg_weather(F6, NewFValue, TrUserData)
			   end,
			   F7, F8, TrUserData).


d_field_req_question_data(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_req_question_data(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_req_question_data(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_question(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_req(Rest2, 0, 0, F1, F2, F3, F4, F5,
			   F6,
			   if F7 == undefined -> NewFValue;
			      true ->
				  merge_msg_question(F7, NewFValue, TrUserData)
			   end,
			   F8, TrUserData).


d_field_req_echo_data(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_req_echo_data(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_req_echo_data(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_echo(Bs, TrUserData), TrUserData),
    dfp_read_field_def_req(Rest2, 0, 0, F1, F2, F3, F4, F5,
			   F6, F7,
			   if F8 == undefined -> NewFValue;
			      true -> merge_msg_echo(F8, NewFValue, TrUserData)
			   end,
			   TrUserData).


skip_varint_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    skip_varint_req(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		    F7, F8, TrUserData);
skip_varint_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_req(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, TrUserData).


skip_length_delimited_req(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    skip_length_delimited_req(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
skip_length_delimited_req(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req(Rest2, 0, 0, F1, F2, F3, F4, F5,
			   F6, F7, F8, TrUserData).


skip_32_req(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	    F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_req(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, TrUserData).


skip_64_req(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	    F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_req(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, TrUserData).


d_msg_envelope(Bin, TrUserData) ->
    dfp_read_field_def_envelope(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_envelope(<<18, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_envelope_uncompressed_data(Rest, Z1, Z2, F1,
				       TrUserData);
dfp_read_field_def_envelope(<<>>, 0, 0, F1, _) ->
    #envelope{uncompressed_data = F1};
dfp_read_field_def_envelope(Other, Z1, Z2, F1,
			    TrUserData) ->
    dg_read_field_def_envelope(Other, Z1, Z2, F1,
			       TrUserData).

dg_read_field_def_envelope(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_envelope(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
dg_read_field_def_envelope(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  d_field_envelope_uncompressed_data(Rest, 0, 0, F1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_envelope(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_envelope(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_envelope(Rest, 0, 0, F1,
					       TrUserData);
	    5 -> skip_32_envelope(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_envelope(<<>>, 0, 0, F1, _) ->
    #envelope{uncompressed_data = F1}.

d_field_envelope_uncompressed_data(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_envelope_uncompressed_data(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
d_field_envelope_uncompressed_data(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_req(Bs, TrUserData), TrUserData),
    dfp_read_field_def_envelope(Rest2, 0, 0,
				if F1 == undefined -> NewFValue;
				   true ->
				       merge_msg_req(F1, NewFValue, TrUserData)
				end,
				TrUserData).


skip_varint_envelope(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    skip_varint_envelope(Rest, Z1, Z2, F1, TrUserData);
skip_varint_envelope(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    dfp_read_field_def_envelope(Rest, Z1, Z2, F1,
				TrUserData).


skip_length_delimited_envelope(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_envelope(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_envelope(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_envelope(Rest2, 0, 0, F1,
				TrUserData).


skip_32_envelope(<<_:32, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_envelope(Rest, Z1, Z2, F1,
				TrUserData).


skip_64_envelope(<<_:64, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_envelope(Rest, Z1, Z2, F1,
				TrUserData).




'd_enum_req.type_enum'(1) -> create_session;
'd_enum_req.type_enum'(2) -> server_message;
'd_enum_req.type_enum'(3) -> options_list;
'd_enum_req.type_enum'(4) -> menu_choice;
'd_enum_req.type_enum'(5) -> weather;
'd_enum_req.type_enum'(6) -> question;
'd_enum_req.type_enum'(7) -> echo;
'd_enum_req.type_enum'(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'options_list.single_option'{} ->
	  'merge_msg_options_list.single_option'(Prev, New,
						 TrUserData);
      #weather{} -> merge_msg_weather(Prev, New, TrUserData);
      #echo{} -> merge_msg_echo(Prev, New, TrUserData);
      #question{} ->
	  merge_msg_question(Prev, New, TrUserData);
      #menu_choice{} ->
	  merge_msg_menu_choice(Prev, New, TrUserData);
      #options_list{} ->
	  merge_msg_options_list(Prev, New, TrUserData);
      #server_message{} ->
	  merge_msg_server_message(Prev, New, TrUserData);
      #create_session{} ->
	  merge_msg_create_session(Prev, New, TrUserData);
      #req{} -> merge_msg_req(Prev, New, TrUserData);
      #envelope{} -> merge_msg_envelope(Prev, New, TrUserData)
    end.

'merge_msg_options_list.single_option'(#'options_list.single_option'{value
									 =
									 PFvalue},
				       #'options_list.single_option'{key =
									 NFkey,
								     value =
									 NFvalue},
				       _) ->
    #'options_list.single_option'{key = NFkey,
				  value =
				      if NFvalue =:= undefined -> PFvalue;
					 true -> NFvalue
				      end}.

merge_msg_weather(#weather{msg = PFmsg},
		  #weather{msg = NFmsg}, _) ->
    #weather{msg =
		 if NFmsg =:= undefined -> PFmsg;
		    true -> NFmsg
		 end}.

merge_msg_echo(#echo{msg = PFmsg}, #echo{msg = NFmsg},
	       _) ->
    #echo{msg =
	      if NFmsg =:= undefined -> PFmsg;
		 true -> NFmsg
	      end}.

merge_msg_question(#question{msg = PFmsg},
		   #question{msg = NFmsg}, _) ->
    #question{msg =
		  if NFmsg =:= undefined -> PFmsg;
		     true -> NFmsg
		  end}.

merge_msg_menu_choice(#menu_choice{choice = PFchoice},
		      #menu_choice{choice = NFchoice}, TrUserData) ->
    #menu_choice{choice =
		     if PFchoice /= undefined, NFchoice /= undefined ->
			    'merge_msg_options_list.single_option'(PFchoice,
								   NFchoice,
								   TrUserData);
			PFchoice == undefined -> NFchoice;
			NFchoice == undefined -> PFchoice
		     end}.

merge_msg_options_list(#options_list{options =
					 PFoptions},
		       #options_list{options = NFoptions}, TrUserData) ->
    #options_list{options =
		      'erlang_++'(PFoptions, NFoptions, TrUserData)}.

merge_msg_server_message(#server_message{},
			 #server_message{message = NFmessage}, _) ->
    #server_message{message = NFmessage}.

merge_msg_create_session(#create_session{},
			 #create_session{username = NFusername}, _) ->
    #create_session{username = NFusername}.

merge_msg_req(#req{create_session_data =
		       PFcreate_session_data,
		   server_message_data = PFserver_message_data,
		   options_list_data = PFoptions_list_data,
		   menu_choice_data = PFmenu_choice_data,
		   weather_data = PFweather_data,
		   question_data = PFquestion_data,
		   echo_data = PFecho_data},
	      #req{type = NFtype,
		   create_session_data = NFcreate_session_data,
		   server_message_data = NFserver_message_data,
		   options_list_data = NFoptions_list_data,
		   menu_choice_data = NFmenu_choice_data,
		   weather_data = NFweather_data,
		   question_data = NFquestion_data,
		   echo_data = NFecho_data},
	      TrUserData) ->
    #req{type = NFtype,
	 create_session_data =
	     if PFcreate_session_data /= undefined,
		NFcreate_session_data /= undefined ->
		    merge_msg_create_session(PFcreate_session_data,
					     NFcreate_session_data, TrUserData);
		PFcreate_session_data == undefined ->
		    NFcreate_session_data;
		NFcreate_session_data == undefined ->
		    PFcreate_session_data
	     end,
	 server_message_data =
	     if PFserver_message_data /= undefined,
		NFserver_message_data /= undefined ->
		    merge_msg_server_message(PFserver_message_data,
					     NFserver_message_data, TrUserData);
		PFserver_message_data == undefined ->
		    NFserver_message_data;
		NFserver_message_data == undefined ->
		    PFserver_message_data
	     end,
	 options_list_data =
	     if PFoptions_list_data /= undefined,
		NFoptions_list_data /= undefined ->
		    merge_msg_options_list(PFoptions_list_data,
					   NFoptions_list_data, TrUserData);
		PFoptions_list_data == undefined -> NFoptions_list_data;
		NFoptions_list_data == undefined -> PFoptions_list_data
	     end,
	 menu_choice_data =
	     if PFmenu_choice_data /= undefined,
		NFmenu_choice_data /= undefined ->
		    merge_msg_menu_choice(PFmenu_choice_data,
					  NFmenu_choice_data, TrUserData);
		PFmenu_choice_data == undefined -> NFmenu_choice_data;
		NFmenu_choice_data == undefined -> PFmenu_choice_data
	     end,
	 weather_data =
	     if PFweather_data /= undefined,
		NFweather_data /= undefined ->
		    merge_msg_weather(PFweather_data, NFweather_data,
				      TrUserData);
		PFweather_data == undefined -> NFweather_data;
		NFweather_data == undefined -> PFweather_data
	     end,
	 question_data =
	     if PFquestion_data /= undefined,
		NFquestion_data /= undefined ->
		    merge_msg_question(PFquestion_data, NFquestion_data,
				       TrUserData);
		PFquestion_data == undefined -> NFquestion_data;
		NFquestion_data == undefined -> PFquestion_data
	     end,
	 echo_data =
	     if PFecho_data /= undefined, NFecho_data /= undefined ->
		    merge_msg_echo(PFecho_data, NFecho_data, TrUserData);
		PFecho_data == undefined -> NFecho_data;
		NFecho_data == undefined -> PFecho_data
	     end}.

merge_msg_envelope(#envelope{uncompressed_data =
				 PFuncompressed_data},
		   #envelope{uncompressed_data = NFuncompressed_data},
		   TrUserData) ->
    #envelope{uncompressed_data =
		  if PFuncompressed_data /= undefined,
		     NFuncompressed_data /= undefined ->
			 merge_msg_req(PFuncompressed_data, NFuncompressed_data,
				       TrUserData);
		     PFuncompressed_data == undefined -> NFuncompressed_data;
		     NFuncompressed_data == undefined -> PFuncompressed_data
		  end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'options_list.single_option'{} ->
	  'v_msg_options_list.single_option'(Msg,
					     ['options_list.single_option'],
					     TrUserData);
      #weather{} -> v_msg_weather(Msg, [weather], TrUserData);
      #echo{} -> v_msg_echo(Msg, [echo], TrUserData);
      #question{} ->
	  v_msg_question(Msg, [question], TrUserData);
      #menu_choice{} ->
	  v_msg_menu_choice(Msg, [menu_choice], TrUserData);
      #options_list{} ->
	  v_msg_options_list(Msg, [options_list], TrUserData);
      #server_message{} ->
	  v_msg_server_message(Msg, [server_message], TrUserData);
      #create_session{} ->
	  v_msg_create_session(Msg, [create_session], TrUserData);
      #req{} -> v_msg_req(Msg, [req], TrUserData);
      #envelope{} ->
	  v_msg_envelope(Msg, [envelope], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,'v_msg_options_list.single_option'/3}).
'v_msg_options_list.single_option'(#'options_list.single_option'{key
								     = F1,
								 value = F2},
				   Path, _) ->
    v_type_int32(F1, [key | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [value | Path])
    end,
    ok;
'v_msg_options_list.single_option'(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   'options_list.single_option'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_weather/3}).
v_msg_weather(#weather{msg = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [msg | Path])
    end,
    ok;
v_msg_weather(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, weather}, X, Path).

-dialyzer({nowarn_function,v_msg_echo/3}).
v_msg_echo(#echo{msg = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [msg | Path])
    end,
    ok;
v_msg_echo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, echo}, X, Path).

-dialyzer({nowarn_function,v_msg_question/3}).
v_msg_question(#question{msg = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [msg | Path])
    end,
    ok;
v_msg_question(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, question}, X, Path).

-dialyzer({nowarn_function,v_msg_menu_choice/3}).
v_msg_menu_choice(#menu_choice{choice = F1}, Path,
		  TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_options_list.single_option'(F1, [choice | Path],
					      TrUserData)
    end,
    ok;
v_msg_menu_choice(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, menu_choice}, X, Path).

-dialyzer({nowarn_function,v_msg_options_list/3}).
v_msg_options_list(#options_list{options = F1}, Path,
		   TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_options_list.single_option'(Elem,
						   [options | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'options_list.single_option'}},
			 F1, Path)
    end,
    ok;
v_msg_options_list(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, options_list}, X, Path).

-dialyzer({nowarn_function,v_msg_server_message/3}).
v_msg_server_message(#server_message{message = F1},
		     Path, _) ->
    v_type_string(F1, [message | Path]), ok;
v_msg_server_message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, server_message}, X, Path).

-dialyzer({nowarn_function,v_msg_create_session/3}).
v_msg_create_session(#create_session{username = F1},
		     Path, _) ->
    v_type_string(F1, [username | Path]), ok;
v_msg_create_session(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, create_session}, X, Path).

-dialyzer({nowarn_function,v_msg_req/3}).
v_msg_req(#req{type = F1, create_session_data = F2,
	       server_message_data = F3, options_list_data = F4,
	       menu_choice_data = F5, weather_data = F6,
	       question_data = F7, echo_data = F8},
	  Path, TrUserData) ->
    'v_enum_req.type_enum'(F1, [type | Path]),
    if F2 == undefined -> ok;
       true ->
	   v_msg_create_session(F2, [create_session_data | Path],
				TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_server_message(F3, [server_message_data | Path],
				TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_options_list(F4, [options_list_data | Path],
			      TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_menu_choice(F5, [menu_choice_data | Path],
			     TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_msg_weather(F6, [weather_data | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_msg_question(F7, [question_data | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_msg_echo(F8, [echo_data | Path], TrUserData)
    end,
    ok;
v_msg_req(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, req}, X, Path).

-dialyzer({nowarn_function,v_msg_envelope/3}).
v_msg_envelope(#envelope{uncompressed_data = F1}, Path,
	       TrUserData) ->
    v_msg_req(F1, [uncompressed_data | Path], TrUserData),
    ok.

-dialyzer({nowarn_function,'v_enum_req.type_enum'/2}).
'v_enum_req.type_enum'(create_session, _Path) -> ok;
'v_enum_req.type_enum'(server_message, _Path) -> ok;
'v_enum_req.type_enum'(options_list, _Path) -> ok;
'v_enum_req.type_enum'(menu_choice, _Path) -> ok;
'v_enum_req.type_enum'(weather, _Path) -> ok;
'v_enum_req.type_enum'(question, _Path) -> ok;
'v_enum_req.type_enum'(echo, _Path) -> ok;
'v_enum_req.type_enum'(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_req.type_enum'(X, Path) ->
    mk_type_error({invalid_enum, 'req.type_enum'}, X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{enum, 'req.type_enum'},
      [{create_session, 1}, {server_message, 2},
       {options_list, 3}, {menu_choice, 4}, {weather, 5},
       {question, 6}, {echo, 7}]},
     {{msg, 'options_list.single_option'},
      [#field{name = key, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, weather},
      [#field{name = msg, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, echo},
      [#field{name = msg, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, question},
      [#field{name = msg, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, menu_choice},
      [#field{name = choice, fnum = 1, rnum = 2,
	      type = {msg, 'options_list.single_option'},
	      occurrence = optional, opts = []}]},
     {{msg, options_list},
      [#field{name = options, fnum = 1, rnum = 2,
	      type = {msg, 'options_list.single_option'},
	      occurrence = repeated, opts = []}]},
     {{msg, server_message},
      [#field{name = message, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, create_session},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, req},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'req.type_enum'}, occurrence = required,
	      opts = []},
       #field{name = create_session_data, fnum = 2, rnum = 3,
	      type = {msg, create_session}, occurrence = optional,
	      opts = []},
       #field{name = server_message_data, fnum = 3, rnum = 4,
	      type = {msg, server_message}, occurrence = optional,
	      opts = []},
       #field{name = options_list_data, fnum = 4, rnum = 5,
	      type = {msg, options_list}, occurrence = optional,
	      opts = []},
       #field{name = menu_choice_data, fnum = 5, rnum = 6,
	      type = {msg, menu_choice}, occurrence = optional,
	      opts = []},
       #field{name = weather_data, fnum = 6, rnum = 7,
	      type = {msg, weather}, occurrence = optional,
	      opts = []},
       #field{name = question_data, fnum = 7, rnum = 8,
	      type = {msg, question}, occurrence = optional,
	      opts = []},
       #field{name = echo_data, fnum = 8, rnum = 9,
	      type = {msg, echo}, occurrence = optional, opts = []}]},
     {{msg, envelope},
      [#field{name = uncompressed_data, fnum = 2, rnum = 2,
	      type = {msg, req}, occurrence = required, opts = []}]}].


get_msg_names() ->
    ['options_list.single_option', weather, echo, question,
     menu_choice, options_list, server_message,
     create_session, req, envelope].


get_enum_names() -> ['req.type_enum'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('options_list.single_option') ->
    [#field{name = key, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(weather) ->
    [#field{name = msg, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(echo) ->
    [#field{name = msg, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(question) ->
    [#field{name = msg, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(menu_choice) ->
    [#field{name = choice, fnum = 1, rnum = 2,
	    type = {msg, 'options_list.single_option'},
	    occurrence = optional, opts = []}];
find_msg_def(options_list) ->
    [#field{name = options, fnum = 1, rnum = 2,
	    type = {msg, 'options_list.single_option'},
	    occurrence = repeated, opts = []}];
find_msg_def(server_message) ->
    [#field{name = message, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(create_session) ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(req) ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'req.type_enum'}, occurrence = required,
	    opts = []},
     #field{name = create_session_data, fnum = 2, rnum = 3,
	    type = {msg, create_session}, occurrence = optional,
	    opts = []},
     #field{name = server_message_data, fnum = 3, rnum = 4,
	    type = {msg, server_message}, occurrence = optional,
	    opts = []},
     #field{name = options_list_data, fnum = 4, rnum = 5,
	    type = {msg, options_list}, occurrence = optional,
	    opts = []},
     #field{name = menu_choice_data, fnum = 5, rnum = 6,
	    type = {msg, menu_choice}, occurrence = optional,
	    opts = []},
     #field{name = weather_data, fnum = 6, rnum = 7,
	    type = {msg, weather}, occurrence = optional,
	    opts = []},
     #field{name = question_data, fnum = 7, rnum = 8,
	    type = {msg, question}, occurrence = optional,
	    opts = []},
     #field{name = echo_data, fnum = 8, rnum = 9,
	    type = {msg, echo}, occurrence = optional, opts = []}];
find_msg_def(envelope) ->
    [#field{name = uncompressed_data, fnum = 2, rnum = 2,
	    type = {msg, req}, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('req.type_enum') ->
    [{create_session, 1}, {server_message, 2},
     {options_list, 3}, {menu_choice, 4}, {weather, 5},
     {question, 6}, {echo, 7}];
find_enum_def(_) -> error.


enum_symbol_by_value('req.type_enum', Value) ->
    'enum_symbol_by_value_req.type_enum'(Value).


enum_value_by_symbol('req.type_enum', Sym) ->
    'enum_value_by_symbol_req.type_enum'(Sym).


'enum_symbol_by_value_req.type_enum'(1) ->
    create_session;
'enum_symbol_by_value_req.type_enum'(2) ->
    server_message;
'enum_symbol_by_value_req.type_enum'(3) -> options_list;
'enum_symbol_by_value_req.type_enum'(4) -> menu_choice;
'enum_symbol_by_value_req.type_enum'(5) -> weather;
'enum_symbol_by_value_req.type_enum'(6) -> question;
'enum_symbol_by_value_req.type_enum'(7) -> echo.


'enum_value_by_symbol_req.type_enum'(create_session) ->
    1;
'enum_value_by_symbol_req.type_enum'(server_message) ->
    2;
'enum_value_by_symbol_req.type_enum'(options_list) -> 3;
'enum_value_by_symbol_req.type_enum'(menu_choice) -> 4;
'enum_value_by_symbol_req.type_enum'(weather) -> 5;
'enum_value_by_symbol_req.type_enum'(question) -> 6;
'enum_value_by_symbol_req.type_enum'(echo) -> 7.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.6".

gpb_version_as_list() ->
    [3,26,6].
